//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(Gaz.DAL.DbContexts.GazSimpleUsersDbContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets600e8914d6591a1bdba1357147da650db8656decfeade8a2c9c7b8a42e911715))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets600e8914d6591a1bdba1357147da650db8656decfeade8a2c9c7b8a42e911715 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "600e8914d6591a1bdba1357147da650db8656decfeade8a2c9c7b8a42e911715"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.User")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.Counter")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.Address")
            {
                return GetView2();
            }

            if (extentName == "CodeFirstDatabase.CounterRead")
            {
                return GetView3();
            }

            if (extentName == "CodeFirstDatabase.UserBill")
            {
                return GetView4();
            }

            if (extentName == "CodeFirstDatabase.UserComplaint")
            {
                return GetView5();
            }

            if (extentName == "CodeFirstDatabase.UserNotification")
            {
                return GetView6();
            }

            if (extentName == "CodeFirstDatabase.UserRole")
            {
                return GetView7();
            }

            if (extentName == "CodeFirstDatabase.UserCounter")
            {
                return GetView8();
            }

            if (extentName == "GazSimpleUsersDbContext.Users")
            {
                return GetView9();
            }

            if (extentName == "GazSimpleUsersDbContext.Counters")
            {
                return GetView10();
            }

            if (extentName == "GazSimpleUsersDbContext.Addresses")
            {
                return GetView11();
            }

            if (extentName == "GazSimpleUsersDbContext.CounterReads")
            {
                return GetView12();
            }

            if (extentName == "GazSimpleUsersDbContext.UserBills")
            {
                return GetView13();
            }

            if (extentName == "GazSimpleUsersDbContext.UserComplaints")
            {
                return GetView14();
            }

            if (extentName == "GazSimpleUsersDbContext.UserNotifications")
            {
                return GetView15();
            }

            if (extentName == "GazSimpleUsersDbContext.UserRoles")
            {
                return GetView16();
            }

            if (extentName == "GazSimpleUsersDbContext.User_User_Counters")
            {
                return GetView17();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.User.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing User
        [CodeFirstDatabaseSchema.User](T1.User_UserID, T1.User_FirstName, T1.User_LastName, T1.User_PhoneNumber, T1.User_Email, T1.User_Password, T1.User_Username, T1.User_RoleID)
    FROM (
        SELECT 
            T.ID AS User_UserID, 
            T.FirstName AS User_FirstName, 
            T.LastName AS User_LastName, 
            T.PhoneNumber AS User_PhoneNumber, 
            T.Email AS User_Email, 
            T.Password AS User_Password, 
            T.Username AS User_Username, 
            T.RoleID AS User_RoleID, 
            True AS _from0
        FROM GazSimpleUsersDbContext.Users AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Counter.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Counter
        [CodeFirstDatabaseSchema.Counter](T1.Counter_ID, T1.Counter_AddressID)
    FROM (
        SELECT 
            T.ID AS Counter_ID, 
            T.AddressID AS Counter_AddressID, 
            True AS _from0
        FROM GazSimpleUsersDbContext.Counters AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Address.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Address
        [CodeFirstDatabaseSchema.Address](T1.Address_ID, T1.Address_CityName, T1.Address_StreetName, T1.Address_HouseNumber, T1.Address_ApartmentNumber, T1.Address_latitude, T1.Address_longitude)
    FROM (
        SELECT 
            T.ID AS Address_ID, 
            T.CityName AS Address_CityName, 
            T.StreetName AS Address_StreetName, 
            T.HouseNumber AS Address_HouseNumber, 
            T.ApartmentNumber AS Address_ApartmentNumber, 
            T.latitude AS Address_latitude, 
            T.longitude AS Address_longitude, 
            True AS _from0
        FROM GazSimpleUsersDbContext.Addresses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.CounterRead.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CounterRead
        [CodeFirstDatabaseSchema.CounterRead](T1.CounterRead_ID, T1.CounterRead_CounterID, T1.CounterRead_CreateTime, T1.CounterRead_ReadAmount)
    FROM (
        SELECT 
            T.ID AS CounterRead_ID, 
            T.CounterID AS CounterRead_CounterID, 
            T.CreateTime AS CounterRead_CreateTime, 
            T.ReadAmount AS CounterRead_ReadAmount, 
            True AS _from0
        FROM GazSimpleUsersDbContext.CounterReads AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.UserBill.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserBill
        [CodeFirstDatabaseSchema.UserBill](T1.UserBill_ID, T1.UserBill_BillAmount, T1.UserBill_CreateTime, T1.UserBill_CounterID, T1.UserBill_Payed)
    FROM (
        SELECT 
            T.ID AS UserBill_ID, 
            T.BillAmount AS UserBill_BillAmount, 
            T.CreateTime AS UserBill_CreateTime, 
            T.CounterID AS UserBill_CounterID, 
            T.Payed AS UserBill_Payed, 
            True AS _from0
        FROM GazSimpleUsersDbContext.UserBills AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.UserComplaint.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserComplaint
        [CodeFirstDatabaseSchema.UserComplaint](T1.UserComplaint_ID, T1.UserComplaint_ComplaintDescription, T1.UserComplaint_UserID, T1.UserComplaint_CounterID, T1.UserComplaint_CreateTime, T1.UserComplaint_Disable)
    FROM (
        SELECT 
            T.ID AS UserComplaint_ID, 
            T.ComplaintDescription AS UserComplaint_ComplaintDescription, 
            T.UserID AS UserComplaint_UserID, 
            T.CounterID AS UserComplaint_CounterID, 
            T.CreateTime AS UserComplaint_CreateTime, 
            T.Disable AS UserComplaint_Disable, 
            True AS _from0
        FROM GazSimpleUsersDbContext.UserComplaints AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.UserNotification.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserNotification
        [CodeFirstDatabaseSchema.UserNotification](T1.UserNotification_ID, T1.UserNotification_NotificationDescription, T1.UserNotification_UserID, T1.UserNotification_CreateTime, T1.UserNotification_Disabled)
    FROM (
        SELECT 
            T.ID AS UserNotification_ID, 
            T.NotificationDescription AS UserNotification_NotificationDescription, 
            T.UserID AS UserNotification_UserID, 
            T.CreateTime AS UserNotification_CreateTime, 
            T.Disabled AS UserNotification_Disabled, 
            True AS _from0
        FROM GazSimpleUsersDbContext.UserNotifications AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.UserRole.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserRole
        [CodeFirstDatabaseSchema.UserRole](T1.UserRole_ID, T1.UserRole_RoleDescription)
    FROM (
        SELECT 
            T.ID AS UserRole_ID, 
            T.RoleDescription AS UserRole_RoleDescription, 
            True AS _from0
        FROM GazSimpleUsersDbContext.UserRoles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.UserCounter.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserCounter
        [CodeFirstDatabaseSchema.UserCounter](T1.UserCounter_UserID, T1.UserCounter_CounterID)
    FROM (
        SELECT 
            Key(T.User_User_Counters_Source).ID AS UserCounter_UserID, 
            Key(T.User_User_Counters_Target).ID AS UserCounter_CounterID, 
            True AS _from0
        FROM GazSimpleUsersDbContext.User_User_Counters AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for GazSimpleUsersDbContext.Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Users
        [Gaz.DAL.DbContexts.User](T1.User_ID, T1.User_FirstName, T1.User_LastName, T1.User_PhoneNumber, T1.User_Email, T1.User_Password, T1.User_Username, T1.User_RoleID)
    FROM (
        SELECT 
            T.UserID AS User_ID, 
            T.FirstName AS User_FirstName, 
            T.LastName AS User_LastName, 
            T.PhoneNumber AS User_PhoneNumber, 
            T.Email AS User_Email, 
            T.Password AS User_Password, 
            T.Username AS User_Username, 
            T.RoleID AS User_RoleID, 
            True AS _from0
        FROM CodeFirstDatabase.User AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for GazSimpleUsersDbContext.Counters.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Counters
        [Gaz.DAL.DbContexts.Counter](T1.Counter_ID, T1.Counter_AddressID)
    FROM (
        SELECT 
            T.ID AS Counter_ID, 
            T.AddressID AS Counter_AddressID, 
            True AS _from0
        FROM CodeFirstDatabase.Counter AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for GazSimpleUsersDbContext.Addresses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Addresses
        [Gaz.DAL.DbContexts.Address](T1.Address_ID, T1.Address_CityName, T1.Address_StreetName, T1.Address_HouseNumber, T1.Address_ApartmentNumber, T1.Address_latitude, T1.Address_longitude)
    FROM (
        SELECT 
            T.ID AS Address_ID, 
            T.CityName AS Address_CityName, 
            T.StreetName AS Address_StreetName, 
            T.HouseNumber AS Address_HouseNumber, 
            T.ApartmentNumber AS Address_ApartmentNumber, 
            T.latitude AS Address_latitude, 
            T.longitude AS Address_longitude, 
            True AS _from0
        FROM CodeFirstDatabase.Address AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for GazSimpleUsersDbContext.CounterReads.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CounterReads
        [Gaz.DAL.DbContexts.CounterRead](T1.CounterRead_ID, T1.CounterRead_CounterID, T1.CounterRead_CreateTime, T1.CounterRead_ReadAmount)
    FROM (
        SELECT 
            T.ID AS CounterRead_ID, 
            T.CounterID AS CounterRead_CounterID, 
            T.CreateTime AS CounterRead_CreateTime, 
            T.ReadAmount AS CounterRead_ReadAmount, 
            True AS _from0
        FROM CodeFirstDatabase.CounterRead AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for GazSimpleUsersDbContext.UserBills.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserBills
        [Gaz.DAL.DbContexts.UserBill](T1.UserBill_ID, T1.UserBill_BillAmount, T1.UserBill_CreateTime, T1.UserBill_CounterID, T1.UserBill_Payed)
    FROM (
        SELECT 
            T.ID AS UserBill_ID, 
            T.BillAmount AS UserBill_BillAmount, 
            T.CreateTime AS UserBill_CreateTime, 
            T.CounterID AS UserBill_CounterID, 
            T.Payed AS UserBill_Payed, 
            True AS _from0
        FROM CodeFirstDatabase.UserBill AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for GazSimpleUsersDbContext.UserComplaints.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserComplaints
        [Gaz.DAL.DbContexts.UserComplaint](T1.UserComplaint_ID, T1.UserComplaint_ComplaintDescription, T1.UserComplaint_UserID, T1.UserComplaint_CounterID, T1.UserComplaint_CreateTime, T1.UserComplaint_Disable)
    FROM (
        SELECT 
            T.ID AS UserComplaint_ID, 
            T.ComplaintDescription AS UserComplaint_ComplaintDescription, 
            T.UserID AS UserComplaint_UserID, 
            T.CounterID AS UserComplaint_CounterID, 
            T.CreateTime AS UserComplaint_CreateTime, 
            T.Disable AS UserComplaint_Disable, 
            True AS _from0
        FROM CodeFirstDatabase.UserComplaint AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for GazSimpleUsersDbContext.UserNotifications.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserNotifications
        [Gaz.DAL.DbContexts.UserNotification](T1.UserNotification_ID, T1.UserNotification_NotificationDescription, T1.UserNotification_UserID, T1.UserNotification_CreateTime, T1.UserNotification_Disabled)
    FROM (
        SELECT 
            T.ID AS UserNotification_ID, 
            T.NotificationDescription AS UserNotification_NotificationDescription, 
            T.UserID AS UserNotification_UserID, 
            T.CreateTime AS UserNotification_CreateTime, 
            T.Disabled AS UserNotification_Disabled, 
            True AS _from0
        FROM CodeFirstDatabase.UserNotification AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for GazSimpleUsersDbContext.UserRoles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserRoles
        [Gaz.DAL.DbContexts.UserRole](T1.UserRole_ID, T1.UserRole_RoleDescription)
    FROM (
        SELECT 
            T.ID AS UserRole_ID, 
            T.RoleDescription AS UserRole_RoleDescription, 
            True AS _from0
        FROM CodeFirstDatabase.UserRole AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for GazSimpleUsersDbContext.User_User_Counters.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing User_User_Counters
        [Gaz.DAL.DbContexts.User_User_Counters](T3.[User_User_Counters.User_User_Counters_Source], T3.[User_User_Counters.User_User_Counters_Target])
    FROM (
        SELECT -- Constructing User_User_Counters_Source
            CreateRef(GazSimpleUsersDbContext.Users, row(T2.[User_User_Counters.User_User_Counters_Source.ID]), [Gaz.DAL.DbContexts.User]) AS [User_User_Counters.User_User_Counters_Source], 
            T2.[User_User_Counters.User_User_Counters_Target]
        FROM (
            SELECT -- Constructing User_User_Counters_Target
                T1.[User_User_Counters.User_User_Counters_Source.ID], 
                CreateRef(GazSimpleUsersDbContext.Counters, row(T1.[User_User_Counters.User_User_Counters_Target.ID]), [Gaz.DAL.DbContexts.Counter]) AS [User_User_Counters.User_User_Counters_Target]
            FROM (
                SELECT 
                    T.UserID AS [User_User_Counters.User_User_Counters_Source.ID], 
                    T.CounterID AS [User_User_Counters.User_User_Counters_Target.ID], 
                    True AS _from0
                FROM CodeFirstDatabase.UserCounter AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
    }
}
